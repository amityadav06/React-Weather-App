{"version":3,"sources":["logo.svg","components/top/weather.jsx","components/top/top.jsx","components/bottom/forcastday.jsx","components/bottom/bottom.jsx","components/footer/footer_top/ftop.jsx","components/footer/footer_bottom/fbottom.jsx","App.jsx","serviceWorker.js","store.js","index.js"],"names":["Weather","props","state","this","temperature","name","weather_descriptions","weather_icons","lat","lon","localtime","wind_speed","wind_degree","wind_dir","pressure","precip","humidity","cloudcover","uv_index","visibility","className","src","React","Component","TopSection","isselectLocationOpen","setState","prevState","e","locationName","target","value","eventEmitter","emit","Manager","Reference","ref","onClick","onToggleSelectLocation","bind","Popper","placement","style","arrowProps","data-placement","htmlFor","id","type","placeholder","onChange","onLocationNameChange","onSelectCity","Forcastday","BottomSection","forecast","Ftop","Fbottom","App","isloading","URL","axios","get","then","res","console","log","data","location","current","catch","err","error","updateWeather","on","forcastdays","Boolean","window","hostname","match","store","EventEmitter","appName","Children","map","children","child","cloneElement","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ef114fa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\nimport SunImg from '../../resources/images/sun.png'\n\nexport default class Weather extends React.Component{\n  constructor(props){\n    super(props)\n    this.state ={}\n  }\n\n  render(){\n    const{name,temperature,weather_descriptions,weather_icons,lat,lon,localtime,wind_speed,wind_degree,wind_dir,pressure,precip,humidity,cloudcover,uv_index,visibility} = this.props\n  //  console.log('ytyuyut',weather_icons)\n    return(\n      <div className='weather-container'>\n        <div className='header'>{weather_descriptions}</div>\n        <div className='inner-container'>\n          <div className='image'>\n            <img src={weather_icons} />\n          </div>\n          <div className='current-weather'>{temperature}Â°</div>\n        </div>\n        <div className='footer'>\n              Localtime &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp;{localtime}<br/>\n              Latitude &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp;{lat}<br/>\n              Longitude &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp;{lon}<br/>\n              Wind speed &nbsp;&nbsp;&nbsp;&nbsp; :&nbsp;&nbsp;{wind_speed} &nbsp;km/h<br/>\n              Wind degree &nbsp;&nbsp;&nbsp; :&nbsp;&nbsp;{wind_degree}<br/>\n              Wind direction &nbsp; :&nbsp;{wind_dir}<br/>\n              Pressure &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp;{pressure}&nbsp;mbar<br/>\n              Precipitation &nbsp;&nbsp;&nbsp;&nbsp; :&nbsp;{precip}<br/>\n              Humidity &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp;{humidity}%<br/>\n              Cloud cover &nbsp;&nbsp;&nbsp;&nbsp; :&nbsp;{cloudcover}%<br/>\n              UV index &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp;{uv_index}<br/>\n              Visibility &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp;{visibility}&nbsp; km<br/>\n          </div>\n      </div>\n\n    )\n  }\n}\n","import React from 'react'\nimport './top.scss'\nimport Weather from './weather'\n\nimport { Manager, Reference, Popper } from 'react-popper';\n\nexport default class TopSection extends React.Component{\n  constructor(props){\n      super(props)\n      this.state ={\n        isselectLocationOpen:false,\n      }\n  }\n\n    onToggleSelectLocation(){\n    this.setState((prevState) => ({ isselectLocationOpen: !prevState.isselectLocationOpen}))\n  }\n\n   onLocationNameChange(e){\n    this.setState({locationName:e.target.value})\n  }\n\n    onSelectCity(){\n    const {locationName} = this.state\n    const {eventEmitter} = this.props\n    this.setState({isselectLocationOpen:false})\n    eventEmitter.emit(\"updateWeather\", locationName)\n  }\n\n  render(){\n  //  console.log(\"ehhkjhkj\", this.props.weather_iconsURL)\n    const {isselectLocationOpen} = this.state\n    const { eventEmitter,name } = this.props\n    //const abc = this.state.isselectLocationOpen\n    return(\n    <div className='top-container'>\n       <div className='title'>{name}</div>\n       <Weather {...this.props}/>\n        <Manager>\n           <Reference>\n             {({ ref }) => (\n               <button\n               className='btn btn-select-location'\n               ref={ref}\n               onClick={this.onToggleSelectLocation.bind(this)}\n               >\n               Select Location\n               </button>\n             )}\n           </Reference>\n           <Popper placement=\"above\">\n             {({ ref, style, placement, arrowProps }) => ( isselectLocationOpen &&\n               <div\n                 className=\"popup-container\"\n                 ref={ref}\n                 style={style}\n                 data-placement={placement}>\n                 <div className=\"form-container\">\n                   <label htmlFor=\"location-name\">Location Name</label>\n                   <input\n                   id=\"location-name\"\n                   type=\"text\"\n                   placeholder=\"City Name\"\n                   onChange={this.onLocationNameChange.bind(this)}\n                   />\n                   <button\n                   className=\"btn btn-select-location\"\n                   onClick={this.onSelectCity.bind(this)}\n                   >\n                   Select\n                   </button>\n                 </div>\n                 <div ref={arrowProps.ref} style={arrowProps.style} />\n               </div>\n             )}\n          </Popper>\n      </Manager>\n    </div>\n  )}\n}\n","import React from 'react'\n\nexport default class Forcastday extends React.Component{\n  constructor(props){\n    super(props)\n\n  }\n\n  render(){\n    return (\n      <div className=\"forcastday-container\">\n         <div className=\"image\"><img src=\"\" /></div>\n         <div className=\"text\"></div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport './bottom.scss'\nimport Forcastday from './forcastday'\n\nexport default class BottomSection extends React.Component{\n  constructor(props){\n      super(props)\n      this.state ={}\n  }\n\n  render(){\n    const {forecast} = this.props\n    return(\n      <div className='bottom-container'>\n          <Forcastday/>\n      </div>\n  )\n  }\n}\n","import React from 'react'\nimport './ftop.scss'\n\nexport default class Ftop extends React.Component{\n  constructor(props){\n    super(props)\n\n    this.state={}\n  }\n\n  render(){\n    return(\n      <div className='upper-container'>\n           <div className='write-here'>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Search accurate weather information about your city.\n           </div>\n           <div className='comp-img'>\n\n           </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport './fbottom.scss'\n\nexport default class Fbottom extends React.Component{\n  constructor(props){\n    super(props)\n\n    this.state={}\n  }\n\n  \n  render(){\n    return(\n      <div className='lower-container'>\n          footer bottom\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './sass/app.scss'\nimport TopSection from './components/top/top'\nimport BottomSection from './components/bottom/bottom'\nimport Ftop from './components/footer/footer_top/ftop'\nimport Fbottom from './components/footer/footer_bottom/fbottom'\nimport axios from 'axios'\n\nconst WEATHER_KEY = '7c1a4226552d6724bb4ffafeaa3a1b3b'\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state ={\n      name:'Pune',\n      forecast:4,\n      isloading:true,\n    }\n  }\n\n  updateWeather(){\n    const {name,forecast} = this.state\n    const URL = `http://api.weatherstack.com/forecast?access_key=${WEATHER_KEY}&query=${name}&forecast_days = 4`\n    axios.get(URL)\n    .then((res) =>{\n      console.log('data: ', res.data)\n      let data = res.data\n      this.setState({\n        isloading:false,\n        name:data.location.name,\n        weather_descriptions:data.current.weather_descriptions,\n        weather_icons:data.current.weather_icons[0],\n        temperature:data.current.temperature,\n        lat:data.location.lat,\n        lon:data.location.lon,\n        localtime:data.location.localtime,\n        wind_speed:data.current.wind_speed,\n        wind_degree:data.current.wind_degree,\n        wind_dir:data.current.wind_dir,\n        pressure:data.current.pressure,\n        precip:data.current.precip,\n        humidity:data.current.humidity,\n        cloudcover:data.current.cloudcover,\n        uv_index:data.current.uv_index,\n        visibility:data.current.visibility,\n        forecast:data.forecast.forecast,\n      })\n      return res.data\n    })\n    // .then((data) =>{\n    //   this.setState={\n    //     isloading:false,\n    //     weather_descriptions:data.current.weather_descriptions,\n    //     weather_iconsURL:data.current.weather_iconsURL,\n    //     temperature:data.current.temperature,\n    //   }\n    // })\n    .catch((err) =>{\n      if(err)\n      console.error(\"Cannot fetch Weather Data from API,\",err)\n    })\n  }\n\n  componentDidMount(){\n    const { eventEmitter } = this.props\n\n    this.updateWeather()\n       eventEmitter.on(\"updateWeather\", (data) =>{\n       this.setState({name:data}, () => this.updateWeather())\n    })\n\n  }\n\n  render(){\n       const {isloading,name, temperature, weather_descriptions, weather_icons,forecast,lat,lon,localtime,wind_speed,wind_degree,wind_dir,pressure,precip,humidity,cloudcover,uv_index,visibility} =this.state\n\n    return(\n      <div className='whole-container'>\n      <div className='app-container'>\n            <div className='text-container'>\n            <div className='headerdash'>\n                 <div className='headimage'>j</div>\n                 <div className='headtext'>WeatherToday</div>\n           </div>\n              <div className='text-section'>\n                 <p> &nbsp;&nbsp;&nbsp;&nbsp;</p>\n              </div>\n            </div>\n      <div className='main-container'>\n      {isloading && <h3>Loading Weather...</h3> }\n      {!isloading &&(\n        <div className='top-section'>\n          <TopSection\n            name={name}\n            temperature={temperature}\n            weather_descriptions={weather_descriptions}\n            weather_icons={weather_icons}\n            lat={lat}\n            lon={lon}\n            localtime={localtime}\n            wind_speed={wind_speed}\n            wind_degree={wind_degree}\n            wind_dir={wind_dir}\n            pressure={pressure}\n            precip={precip}\n            humidity={humidity}\n            cloudcover={cloudcover}\n            uv_index={uv_index}\n            visibility={visibility}\n            eventEmitter={this.props.eventEmitter}\n          />\n      </div>\n    )}\n       <div className='bottom-section'>\n           < BottomSection  forcastdays={forecast}/>\n        </div>\n       </div>\n      </div>\n         <div className='whole-footer'>\n             <div className='footer-top'>\n                < Ftop/>\n             </div>\n             <div className='footer-bottom'>\n                <Fbottom/>\n             </div>\n        </div>\n    </div>\n    )\n   }\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport {EventEmitter} from 'events'\n\n\nexport default class store extends React.Component{\n\n  constructor(props){\n    super(props)\n\n    this.eventEmitter = new EventEmitter()\n\n    this.state ={\n      appName:\"Weather Up\"\n    }\n  }\n\n  render(){\n    return React.Children.map(this.props.children, child =>{\n      return React.cloneElement(child, {\n        ...this.state,\n       eventEmitter:this.eventEmitter\n      })\n    })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport Store from './store'\n\nReactDOM.render(<Store><App /></Store> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}